<dec f='include/physfs.h' l='910' type='int PHYSFS_mkdir(const char * dirName)'/>
<use f='codebrowser/src/lowlevel/QuestFiles.cpp' l='91' u='c' c='_ZN7Solarus10QuestFiles12_GLOBAL__N_121set_solarus_write_dirERKSs'/>
<use f='codebrowser/src/lowlevel/QuestFiles.cpp' l='363' u='c' c='_ZN7Solarus10QuestFiles15data_file_mkdirERKSs'/>
<use f='codebrowser/src/lowlevel/QuestFiles.cpp' l='460' u='c' c='_ZN7Solarus10QuestFiles19set_quest_write_dirERKSs'/>
<doc f='include/physfs.h' l='889'>/**
 * \fn int PHYSFS_mkdir(const char *dirName)
 * \brief Create a directory.
 *
 * This is specified in platform-independent notation in relation to the
 *  write dir. All missing parent directories are also created if they
 *  don&apos;t exist.
 *
 * So if you&apos;ve got the write dir set to &quot;C:\mygame\writedir&quot; and call
 *  PHYSFS_mkdir(&quot;downloads/maps&quot;) then the directories
 *  &quot;C:\mygame\writedir\downloads&quot; and &quot;C:\mygame\writedir\downloads\maps&quot;
 *  will be created if possible. If the creation of &quot;maps&quot; fails after we
 *  have successfully created &quot;downloads&quot;, then the function leaves the
 *  created directory behind and reports failure.
 *
 *   \param dirName New dir to create.
 *  \return nonzero on success, zero on error. Specifics of the error can be
 *          gleaned from PHYSFS_getLastError().
 *
 * \sa PHYSFS_delete
 */</doc>
