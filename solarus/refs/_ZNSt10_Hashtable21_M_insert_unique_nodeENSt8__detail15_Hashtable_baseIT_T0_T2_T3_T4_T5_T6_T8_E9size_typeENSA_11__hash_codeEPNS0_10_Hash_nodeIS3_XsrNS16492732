<dec f='include/c++/4.9/bits/hashtable.h' l='648' type='iterator std::_Hashtable::_M_insert_unique_node(size_type __bkt, __hash_code __code, __node_type * __n)'/>
<use f='include/c++/4.9/bits/hashtable.h' l='1563' u='c' c='_ZNSt10_Hashtable10_M_emplaceESt17integral_constantIbLb1EEDpOT_'/>
<def f='include/c++/4.9/bits/hashtable.h' l='1597' ll='1633' type='typename _Hashtable&lt;_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits&gt;::iterator std::_Hashtable::_M_insert_unique_node(size_type __bkt, __hash_code __code, __node_type * __node)'/>
<use f='include/c++/4.9/bits/hashtable.h' l='1724' u='c' c='_ZNSt10_Hashtable9_M_insertEOT_RKT0_St17integral_constantIbLb1EE'/>
<doc f='include/c++/4.9/bits/hashtable.h' l='644'>// Insert node with hash code __code, in bucket bkt if no rehash (assumes
      // no element with its key already present). Take ownership of the node,
      // deallocate it on exception.</doc>
