<def f='include/x86_64-linux-gnu/qt5/QtCore/qatomic_x86.h' l='154' ll='165' type='static bool QBasicAtomicOps&lt;1&gt;::ref(T &amp; _q_value)'/>
<doc f='include/x86_64-linux-gnu/qt5/QtCore/qatomic_x86.h' l='126'>/*
 * Guide for the inline assembly below:
 *
 * x86 instructions are in the form &quot;{opcode}{length} {source}, {destination}&quot;,
 * where the length is one of the letters &quot;b&quot; (byte), &quot;w&quot; (word, 16-bit), &quot;l&quot;
 * (dword, 32-bit), &quot;q&quot; (qword, 64-bit).
 *
 * In most cases, we can omit the length because it&apos;s inferred from one of the
 * registers. For example, &quot;xchg %0,%1&quot; doesn&apos;t need the length suffix because
 * we can only exchange data of the same size and one of the operands must be a
 * register.
 *
 * The exception is the increment and decrement functions, where we add and
 * subtract an immediate value (1). For those, we need to specify the length.
 * GCC and ICC support the syntax &quot;add%z0 $1, %0&quot;, where &quot;%z0&quot; expands to the
 * length of the operand. Unfortunately, clang as of 3.0 doesn&apos;t support that.
 * For that reason, the ref() and deref() functions are rolled out for all
 * sizes.
 *
 * The functions are also rolled out for the 1-byte operations since those
 * require a special register constraint &quot;q&quot; to force the compiler to schedule
 * one of the 8-bit registers. It&apos;s probably a compiler bug that it tries to
 * use a register that doesn&apos;t exist.
 *
 * Finally, 64-bit operations are supported via the cmpxchg8b instruction on
 * 32-bit processors, via specialisation below.
 */</doc>
